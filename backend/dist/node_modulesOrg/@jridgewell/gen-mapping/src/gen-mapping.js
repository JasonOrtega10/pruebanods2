"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenMapping = exports.allMappings = exports.fromMap = exports.toEncodedMap = exports.toDecodedMap = exports.setSourceContent = exports.maybeAddMapping = exports.maybeAddSegment = exports.addMapping = exports.addSegment = void 0;
const set_array_1 = require("@jridgewell/set-array");
const sourcemap_codec_1 = require("@jridgewell/sourcemap-codec");
const trace_mapping_1 = require("@jridgewell/trace-mapping");
const sourcemap_segment_1 = require("./sourcemap-segment");
const NO_NAME = -1;
let addSegmentInternal;
class GenMapping {
    constructor({ file, sourceRoot } = {}) {
        this._names = new set_array_1.SetArray();
        this._sources = new set_array_1.SetArray();
        this._sourcesContent = [];
        this._mappings = [];
        this.file = file;
        this.sourceRoot = sourceRoot;
    }
}
exports.GenMapping = GenMapping;
(() => {
    exports.addSegment = (map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) => {
        return addSegmentInternal(false, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content);
    };
    exports.maybeAddSegment = (map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) => {
        return addSegmentInternal(true, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content);
    };
    exports.addMapping = (map, mapping) => {
        return addMappingInternal(false, map, mapping);
    };
    exports.maybeAddMapping = (map, mapping) => {
        return addMappingInternal(true, map, mapping);
    };
    exports.setSourceContent = (map, source, content) => {
        const { _sources: sources, _sourcesContent: sourcesContent } = map;
        sourcesContent[(0, set_array_1.put)(sources, source)] = content;
    };
    exports.toDecodedMap = (map) => {
        const { file, sourceRoot, _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names, } = map;
        removeEmptyFinalLines(mappings);
        return {
            version: 3,
            file: file || undefined,
            names: names.array,
            sourceRoot: sourceRoot || undefined,
            sources: sources.array,
            sourcesContent,
            mappings,
        };
    };
    exports.toEncodedMap = (map) => {
        const decoded = (0, exports.toDecodedMap)(map);
        return Object.assign(Object.assign({}, decoded), { mappings: (0, sourcemap_codec_1.encode)(decoded.mappings) });
    };
    exports.allMappings = (map) => {
        const out = [];
        const { _mappings: mappings, _sources: sources, _names: names } = map;
        for (let i = 0; i < mappings.length; i++) {
            const line = mappings[i];
            for (let j = 0; j < line.length; j++) {
                const seg = line[j];
                const generated = { line: i + 1, column: seg[sourcemap_segment_1.COLUMN] };
                let source = undefined;
                let original = undefined;
                let name = undefined;
                if (seg.length !== 1) {
                    source = sources.array[seg[sourcemap_segment_1.SOURCES_INDEX]];
                    original = { line: seg[sourcemap_segment_1.SOURCE_LINE] + 1, column: seg[sourcemap_segment_1.SOURCE_COLUMN] };
                    if (seg.length === 5)
                        name = names.array[seg[sourcemap_segment_1.NAMES_INDEX]];
                }
                out.push({ generated, source, original, name });
            }
        }
        return out;
    };
    exports.fromMap = (input) => {
        const map = new trace_mapping_1.TraceMap(input);
        const gen = new GenMapping({ file: map.file, sourceRoot: map.sourceRoot });
        putAll(gen._names, map.names);
        putAll(gen._sources, map.sources);
        gen._sourcesContent = map.sourcesContent || map.sources.map(() => null);
        gen._mappings = (0, trace_mapping_1.decodedMappings)(map);
        return gen;
    };
    addSegmentInternal = (skipable, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) => {
        const { _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names, } = map;
        const line = getLine(mappings, genLine);
        const index = getColumnIndex(line, genColumn);
        if (!source) {
            if (skipable && skipSourceless(line, index))
                return;
            return insert(line, index, [genColumn]);
        }
        assert(sourceLine);
        assert(sourceColumn);
        const sourcesIndex = (0, set_array_1.put)(sources, source);
        const namesIndex = name ? (0, set_array_1.put)(names, name) : NO_NAME;
        if (sourcesIndex === sourcesContent.length)
            sourcesContent[sourcesIndex] = content !== null && content !== void 0 ? content : null;
        if (skipable && skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex)) {
            return;
        }
        return insert(line, index, name
            ? [genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex]
            : [genColumn, sourcesIndex, sourceLine, sourceColumn]);
    };
})();
function assert(_val) {
}
function getLine(mappings, index) {
    for (let i = mappings.length; i <= index; i++) {
        mappings[i] = [];
    }
    return mappings[index];
}
function getColumnIndex(line, genColumn) {
    let index = line.length;
    for (let i = index - 1; i >= 0; index = i--) {
        const current = line[i];
        if (genColumn >= current[sourcemap_segment_1.COLUMN])
            break;
    }
    return index;
}
function insert(array, index, value) {
    for (let i = array.length; i > index; i--) {
        array[i] = array[i - 1];
    }
    array[index] = value;
}
function removeEmptyFinalLines(mappings) {
    const { length } = mappings;
    let len = length;
    for (let i = len - 1; i >= 0; len = i, i--) {
        if (mappings[i].length > 0)
            break;
    }
    if (len < length)
        mappings.length = len;
}
function putAll(strarr, array) {
    for (let i = 0; i < array.length; i++)
        (0, set_array_1.put)(strarr, array[i]);
}
function skipSourceless(line, index) {
    if (index === 0)
        return true;
    const prev = line[index - 1];
    return prev.length === 1;
}
function skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex) {
    if (index === 0)
        return false;
    const prev = line[index - 1];
    if (prev.length === 1)
        return false;
    return (sourcesIndex === prev[sourcemap_segment_1.SOURCES_INDEX] &&
        sourceLine === prev[sourcemap_segment_1.SOURCE_LINE] &&
        sourceColumn === prev[sourcemap_segment_1.SOURCE_COLUMN] &&
        namesIndex === (prev.length === 5 ? prev[sourcemap_segment_1.NAMES_INDEX] : NO_NAME));
}
function addMappingInternal(skipable, map, mapping) {
    const { generated, source, original, name, content } = mapping;
    if (!source) {
        return addSegmentInternal(skipable, map, generated.line - 1, generated.column, null, null, null, null, null);
    }
    const s = source;
    assert(original);
    return addSegmentInternal(skipable, map, generated.line - 1, generated.column, s, original.line - 1, original.column, name, content);
}
//# sourceMappingURL=gen-mapping.js.map